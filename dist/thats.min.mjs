const s=s=>Object.prototype.toString.call(s).slice(8,-1),a=s=>"number"==typeof s,i=s=>a(s)&&s%1==0,e=s=>a(s)&&Math.abs(s)==1/0,t=t=>i(t)?"Integer":a(t)&&!t?"NaN":e(t)?"Infinity":a(t)?"Float":s(t),n=s=>s instanceof Array,r=s=>"boolean"==typeof s,o=s=>s instanceof Date,l=s=>!(null==s),f=s=>""==s,y=a=>"Array"==s(a)&&!a.length,c=a=>"Object"==s(a)&&0===Object.keys(a).length,b=s=>""===s,p=s=>s instanceof Error,g=s=>!s,m=s=>a(s)&&!!s&&Math.abs(s)!=1/0&&s%1!=0,u=s=>"function"==typeof s,S=s=>"string"==typeof s,N=s=>{try{return S(s)&&!!JSON.parse(s)}catch(s){return!1}},d=s=>s instanceof Map,O=s=>a(s)&&s!=s,E=s=>null==s,h=s=>null===s,j=a=>"Object"==s(a),M=a=>"Null Undefined Boolean String Number Symbol".indexOf(s(a))>-1,x=s=>s instanceof Promise,A=s=>s instanceof RegExp,F=s=>a(s)&&s==s&&Math.abs(s)!=1/0,I=s=>S(s)&&""!==s,P=s=>s instanceof Set,D=a=>"Symbol"==s(a),U=s=>void 0===s,v=s=>null==s||""===s;export{s as getProto,t as getType,n as isArray,r as isBoolean,o as isDate,l as isDefined,f as isEmpty,y as isEmptyArray,c as isEmptyObject,b as isEmptyString,p as isError,g as isFalse,m as isFloat,u as isFunction,e as isInfinity,i as isInteger,N as isJson,d as isMap,O as isNan,E as isNil,h as isNull,a as isNumber,j as isObject,M as isPrimitive,x as isPromise,A as isRegexp,F as isSafeNumber,I as isSafeString,P as isSet,S as isString,D as isSymbol,U as isUndefined,v as isUnfilled};
